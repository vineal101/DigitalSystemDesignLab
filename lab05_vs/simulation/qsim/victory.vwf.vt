// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/11/2024 12:38:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    game
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module game_vlg_sample_tst(
	clk,
	e,
	n,
	reset,
	s,
	w,
	sampler_tx
);
input  clk;
input  e;
input  n;
input  reset;
input  s;
input  w;
output sampler_tx;

reg sample;
time current_time;
always @(clk or e or n or reset or s or w)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module game_vlg_check_tst (
	d,
	s0,
	s1,
	s2,
	s3,
	s4,
	s5,
	s6,
	sw,
	v,
	win,
	sampler_rx
);
input  d;
input  s0;
input  s1;
input  s2;
input  s3;
input  s4;
input  s5;
input  s6;
input  sw;
input  v;
input  win;
input sampler_rx;

reg  d_expected;
reg  s0_expected;
reg  s1_expected;
reg  s2_expected;
reg  s3_expected;
reg  s4_expected;
reg  s5_expected;
reg  s6_expected;
reg  sw_expected;
reg  v_expected;
reg  win_expected;

reg  d_prev;
reg  s0_prev;
reg  s1_prev;
reg  s2_prev;
reg  s3_prev;
reg  s4_prev;
reg  s5_prev;
reg  s6_prev;
reg  sw_prev;
reg  v_prev;
reg  win_prev;

reg  d_expected_prev;
reg  s0_expected_prev;
reg  s1_expected_prev;
reg  s2_expected_prev;
reg  s3_expected_prev;
reg  s4_expected_prev;
reg  s5_expected_prev;
reg  s6_expected_prev;
reg  sw_expected_prev;
reg  v_expected_prev;
reg  win_expected_prev;

reg  last_d_exp;
reg  last_s0_exp;
reg  last_s1_exp;
reg  last_s2_exp;
reg  last_s3_exp;
reg  last_s4_exp;
reg  last_s5_exp;
reg  last_s6_exp;
reg  last_sw_exp;
reg  last_v_exp;
reg  last_win_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	d_prev = d;
	s0_prev = s0;
	s1_prev = s1;
	s2_prev = s2;
	s3_prev = s3;
	s4_prev = s4;
	s5_prev = s5;
	s6_prev = s6;
	sw_prev = sw;
	v_prev = v;
	win_prev = win;
end

// update expected /o prevs

always @(trigger)
begin
	d_expected_prev = d_expected;
	s0_expected_prev = s0_expected;
	s1_expected_prev = s1_expected;
	s2_expected_prev = s2_expected;
	s3_expected_prev = s3_expected;
	s4_expected_prev = s4_expected;
	s5_expected_prev = s5_expected;
	s6_expected_prev = s6_expected;
	sw_expected_prev = sw_expected;
	v_expected_prev = v_expected;
	win_expected_prev = win_expected;
end



// expected win
initial
begin
	win_expected = 1'bX;
end 

// expected d
initial
begin
	d_expected = 1'bX;
end 

// expected s6
initial
begin
	s6_expected = 1'bX;
end 

// expected s5
initial
begin
	s5_expected = 1'bX;
end 

// expected s4
initial
begin
	s4_expected = 1'bX;
end 

// expected s3
initial
begin
	s3_expected = 1'bX;
end 

// expected s2
initial
begin
	s2_expected = 1'bX;
end 

// expected s1
initial
begin
	s1_expected = 1'bX;
end 

// expected s0
initial
begin
	s0_expected = 1'bX;
end 

// expected sw
initial
begin
	sw_expected = 1'bX;
end 

// expected v
initial
begin
	v_expected = 1'bX;
end 
// generate trigger
always @(d_expected or d or s0_expected or s0 or s1_expected or s1 or s2_expected or s2 or s3_expected or s3 or s4_expected or s4 or s5_expected or s5 or s6_expected or s6 or sw_expected or sw or v_expected or v or win_expected or win)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected d = %b | expected s0 = %b | expected s1 = %b | expected s2 = %b | expected s3 = %b | expected s4 = %b | expected s5 = %b | expected s6 = %b | expected sw = %b | expected v = %b | expected win = %b | ",d_expected_prev,s0_expected_prev,s1_expected_prev,s2_expected_prev,s3_expected_prev,s4_expected_prev,s5_expected_prev,s6_expected_prev,sw_expected_prev,v_expected_prev,win_expected_prev);
	$display("| real d = %b | real s0 = %b | real s1 = %b | real s2 = %b | real s3 = %b | real s4 = %b | real s5 = %b | real s6 = %b | real sw = %b | real v = %b | real win = %b | ",d_prev,s0_prev,s1_prev,s2_prev,s3_prev,s4_prev,s5_prev,s6_prev,sw_prev,v_prev,win_prev);
`endif
	if (
		( d_expected_prev !== 1'bx ) && ( d_prev !== d_expected_prev )
		&& ((d_expected_prev !== last_d_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_expected_prev);
		$display ("     Real value = %b", d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_d_exp = d_expected_prev;
	end
	if (
		( s0_expected_prev !== 1'bx ) && ( s0_prev !== s0_expected_prev )
		&& ((s0_expected_prev !== last_s0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s0_expected_prev);
		$display ("     Real value = %b", s0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s0_exp = s0_expected_prev;
	end
	if (
		( s1_expected_prev !== 1'bx ) && ( s1_prev !== s1_expected_prev )
		&& ((s1_expected_prev !== last_s1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s1_exp = s1_expected_prev;
	end
	if (
		( s2_expected_prev !== 1'bx ) && ( s2_prev !== s2_expected_prev )
		&& ((s2_expected_prev !== last_s2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s2_exp = s2_expected_prev;
	end
	if (
		( s3_expected_prev !== 1'bx ) && ( s3_prev !== s3_expected_prev )
		&& ((s3_expected_prev !== last_s3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s3_expected_prev);
		$display ("     Real value = %b", s3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_s3_exp = s3_expected_prev;
	end
	if (
		( s4_expected_prev !== 1'bx ) && ( s4_prev !== s4_expected_prev )
		&& ((s4_expected_prev !== last_s4_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s4_expected_prev);
		$display ("     Real value = %b", s4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_s4_exp = s4_expected_prev;
	end
	if (
		( s5_expected_prev !== 1'bx ) && ( s5_prev !== s5_expected_prev )
		&& ((s5_expected_prev !== last_s5_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s5_expected_prev);
		$display ("     Real value = %b", s5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_s5_exp = s5_expected_prev;
	end
	if (
		( s6_expected_prev !== 1'bx ) && ( s6_prev !== s6_expected_prev )
		&& ((s6_expected_prev !== last_s6_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s6_expected_prev);
		$display ("     Real value = %b", s6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_s6_exp = s6_expected_prev;
	end
	if (
		( sw_expected_prev !== 1'bx ) && ( sw_prev !== sw_expected_prev )
		&& ((sw_expected_prev !== last_sw_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sw :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sw_expected_prev);
		$display ("     Real value = %b", sw_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_sw_exp = sw_expected_prev;
	end
	if (
		( v_expected_prev !== 1'bx ) && ( v_prev !== v_expected_prev )
		&& ((v_expected_prev !== last_v_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v_expected_prev);
		$display ("     Real value = %b", v_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_v_exp = v_expected_prev;
	end
	if (
		( win_expected_prev !== 1'bx ) && ( win_prev !== win_expected_prev )
		&& ((win_expected_prev !== last_win_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port win :: @time = %t",  $realtime);
		$display ("     Expected value = %b", win_expected_prev);
		$display ("     Real value = %b", win_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_win_exp = win_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module game_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg e;
reg n;
reg reset;
reg s;
reg w;
// wires                                               
wire d;
wire s0;
wire s1;
wire s2;
wire s3;
wire s4;
wire s5;
wire s6;
wire sw;
wire v;
wire win;

wire sampler;                             

// assign statements (if any)                          
game i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.d(d),
	.e(e),
	.n(n),
	.reset(reset),
	.s(s),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.sw(sw),
	.v(v),
	.w(w),
	.win(win)
);

// clk
initial
begin
	clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

// n
initial
begin
	n = 1'b0;
	n = #200000 1'b1;
	n = #20000 1'b0;
end 

// s
initial
begin
	s = 1'b0;
	s = #160000 1'b1;
	s = #20000 1'b0;
	s = #60000 1'b1;
	s = #20000 1'b0;
	s = #100000 1'b1;
	s = #20000 1'b0;
end 

// e
initial
begin
	e = 1'b0;
	e = #40000 1'b1;
	e = #20000 1'b0;
	e = #60000 1'b1;
	e = #20000 1'b0;
	e = #180000 1'b1;
	e = #20000 1'b0;
	e = #20000 1'b1;
	e = #20000 1'b0;
end 

// w
initial
begin
	w = 1'b0;
	w = #80000 1'b1;
	w = #20000 1'b0;
	w = #180000 1'b1;
	w = #20000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #30000 1'b0;
	reset = #440000 1'b1;
	reset = #20000 1'b0;
end 

game_vlg_sample_tst tb_sample (
	.clk(clk),
	.e(e),
	.n(n),
	.reset(reset),
	.s(s),
	.w(w),
	.sampler_tx(sampler)
);

game_vlg_check_tst tb_out(
	.d(d),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.sw(sw),
	.v(v),
	.win(win),
	.sampler_rx(sampler)
);
endmodule

