// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2024 18:46:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_vlg_check_tst (
	VGA_B,
	VGA_G,
	VGA_R,
	clk_out,
	vga_blank,
	vga_h_sync,
	vga_sync,
	vga_v_sync,
	sampler_rx
);
input [7:0] VGA_B;
input [7:0] VGA_G;
input [7:0] VGA_R;
input  clk_out;
input  vga_blank;
input  vga_h_sync;
input  vga_sync;
input  vga_v_sync;
input sampler_rx;

reg [7:0] VGA_B_expected;
reg [7:0] VGA_G_expected;
reg [7:0] VGA_R_expected;
reg  clk_out_expected;
reg  vga_blank_expected;
reg  vga_h_sync_expected;
reg  vga_sync_expected;
reg  vga_v_sync_expected;

reg [7:0] VGA_B_prev;
reg [7:0] VGA_G_prev;
reg [7:0] VGA_R_prev;
reg  clk_out_prev;
reg  vga_blank_prev;
reg  vga_h_sync_prev;
reg  vga_sync_prev;
reg  vga_v_sync_prev;

reg [7:0] VGA_B_expected_prev;
reg [7:0] VGA_G_expected_prev;
reg [7:0] VGA_R_expected_prev;
reg  clk_out_expected_prev;
reg  vga_blank_expected_prev;
reg  vga_h_sync_expected_prev;
reg  vga_sync_expected_prev;
reg  vga_v_sync_expected_prev;

reg [7:0] last_VGA_B_exp;
reg [7:0] last_VGA_G_exp;
reg [7:0] last_VGA_R_exp;
reg  last_clk_out_exp;
reg  last_vga_blank_exp;
reg  last_vga_h_sync_exp;
reg  last_vga_sync_exp;
reg  last_vga_v_sync_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	VGA_B_prev = VGA_B;
	VGA_G_prev = VGA_G;
	VGA_R_prev = VGA_R;
	clk_out_prev = clk_out;
	vga_blank_prev = vga_blank;
	vga_h_sync_prev = vga_h_sync;
	vga_sync_prev = vga_sync;
	vga_v_sync_prev = vga_v_sync;
end

// update expected /o prevs

always @(trigger)
begin
	VGA_B_expected_prev = VGA_B_expected;
	VGA_G_expected_prev = VGA_G_expected;
	VGA_R_expected_prev = VGA_R_expected;
	clk_out_expected_prev = clk_out_expected;
	vga_blank_expected_prev = vga_blank_expected;
	vga_h_sync_expected_prev = vga_h_sync_expected;
	vga_sync_expected_prev = vga_sync_expected;
	vga_v_sync_expected_prev = vga_v_sync_expected;
end


// expected VGA_B[ 7 ]
initial
begin
	VGA_B_expected[7] = 1'bX;
end 
// expected VGA_B[ 6 ]
initial
begin
	VGA_B_expected[6] = 1'bX;
end 
// expected VGA_B[ 5 ]
initial
begin
	VGA_B_expected[5] = 1'bX;
end 
// expected VGA_B[ 4 ]
initial
begin
	VGA_B_expected[4] = 1'bX;
end 
// expected VGA_B[ 3 ]
initial
begin
	VGA_B_expected[3] = 1'bX;
end 
// expected VGA_B[ 2 ]
initial
begin
	VGA_B_expected[2] = 1'bX;
end 
// expected VGA_B[ 1 ]
initial
begin
	VGA_B_expected[1] = 1'bX;
end 
// expected VGA_B[ 0 ]
initial
begin
	VGA_B_expected[0] = 1'bX;
end 
// expected VGA_G[ 7 ]
initial
begin
	VGA_G_expected[7] = 1'bX;
end 
// expected VGA_G[ 6 ]
initial
begin
	VGA_G_expected[6] = 1'bX;
end 
// expected VGA_G[ 5 ]
initial
begin
	VGA_G_expected[5] = 1'bX;
end 
// expected VGA_G[ 4 ]
initial
begin
	VGA_G_expected[4] = 1'bX;
end 
// expected VGA_G[ 3 ]
initial
begin
	VGA_G_expected[3] = 1'bX;
end 
// expected VGA_G[ 2 ]
initial
begin
	VGA_G_expected[2] = 1'bX;
end 
// expected VGA_G[ 1 ]
initial
begin
	VGA_G_expected[1] = 1'bX;
end 
// expected VGA_G[ 0 ]
initial
begin
	VGA_G_expected[0] = 1'bX;
end 
// expected VGA_R[ 7 ]
initial
begin
	VGA_R_expected[7] = 1'bX;
end 
// expected VGA_R[ 6 ]
initial
begin
	VGA_R_expected[6] = 1'bX;
end 
// expected VGA_R[ 5 ]
initial
begin
	VGA_R_expected[5] = 1'bX;
end 
// expected VGA_R[ 4 ]
initial
begin
	VGA_R_expected[4] = 1'bX;
end 
// expected VGA_R[ 3 ]
initial
begin
	VGA_R_expected[3] = 1'bX;
end 
// expected VGA_R[ 2 ]
initial
begin
	VGA_R_expected[2] = 1'bX;
end 
// expected VGA_R[ 1 ]
initial
begin
	VGA_R_expected[1] = 1'bX;
end 
// expected VGA_R[ 0 ]
initial
begin
	VGA_R_expected[0] = 1'bX;
end 

// expected clk_out
initial
begin
	clk_out_expected = 1'bX;
end 

// expected vga_blank
initial
begin
	vga_blank_expected = 1'bX;
end 

// expected vga_h_sync
initial
begin
	vga_h_sync_expected = 1'bX;
end 

// expected vga_sync
initial
begin
	vga_sync_expected = 1'bX;
end 

// expected vga_v_sync
initial
begin
	vga_v_sync_expected = 1'bX;
end 
// generate trigger
always @(VGA_B_expected or VGA_B or VGA_G_expected or VGA_G or VGA_R_expected or VGA_R or clk_out_expected or clk_out or vga_blank_expected or vga_blank or vga_h_sync_expected or vga_h_sync or vga_sync_expected or vga_sync or vga_v_sync_expected or vga_v_sync)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected VGA_B = %b | expected VGA_G = %b | expected VGA_R = %b | expected clk_out = %b | expected vga_blank = %b | expected vga_h_sync = %b | expected vga_sync = %b | expected vga_v_sync = %b | ",VGA_B_expected_prev,VGA_G_expected_prev,VGA_R_expected_prev,clk_out_expected_prev,vga_blank_expected_prev,vga_h_sync_expected_prev,vga_sync_expected_prev,vga_v_sync_expected_prev);
	$display("| real VGA_B = %b | real VGA_G = %b | real VGA_R = %b | real clk_out = %b | real vga_blank = %b | real vga_h_sync = %b | real vga_sync = %b | real vga_v_sync = %b | ",VGA_B_prev,VGA_G_prev,VGA_R_prev,clk_out_prev,vga_blank_prev,vga_h_sync_prev,vga_sync_prev,vga_v_sync_prev);
`endif
	if (
		( VGA_B_expected_prev[0] !== 1'bx ) && ( VGA_B_prev[0] !== VGA_B_expected_prev[0] )
		&& ((VGA_B_expected_prev[0] !== last_VGA_B_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_VGA_B_exp[0] = VGA_B_expected_prev[0];
	end
	if (
		( VGA_B_expected_prev[1] !== 1'bx ) && ( VGA_B_prev[1] !== VGA_B_expected_prev[1] )
		&& ((VGA_B_expected_prev[1] !== last_VGA_B_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_VGA_B_exp[1] = VGA_B_expected_prev[1];
	end
	if (
		( VGA_B_expected_prev[2] !== 1'bx ) && ( VGA_B_prev[2] !== VGA_B_expected_prev[2] )
		&& ((VGA_B_expected_prev[2] !== last_VGA_B_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_VGA_B_exp[2] = VGA_B_expected_prev[2];
	end
	if (
		( VGA_B_expected_prev[3] !== 1'bx ) && ( VGA_B_prev[3] !== VGA_B_expected_prev[3] )
		&& ((VGA_B_expected_prev[3] !== last_VGA_B_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_VGA_B_exp[3] = VGA_B_expected_prev[3];
	end
	if (
		( VGA_B_expected_prev[4] !== 1'bx ) && ( VGA_B_prev[4] !== VGA_B_expected_prev[4] )
		&& ((VGA_B_expected_prev[4] !== last_VGA_B_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_VGA_B_exp[4] = VGA_B_expected_prev[4];
	end
	if (
		( VGA_B_expected_prev[5] !== 1'bx ) && ( VGA_B_prev[5] !== VGA_B_expected_prev[5] )
		&& ((VGA_B_expected_prev[5] !== last_VGA_B_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_VGA_B_exp[5] = VGA_B_expected_prev[5];
	end
	if (
		( VGA_B_expected_prev[6] !== 1'bx ) && ( VGA_B_prev[6] !== VGA_B_expected_prev[6] )
		&& ((VGA_B_expected_prev[6] !== last_VGA_B_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_VGA_B_exp[6] = VGA_B_expected_prev[6];
	end
	if (
		( VGA_B_expected_prev[7] !== 1'bx ) && ( VGA_B_prev[7] !== VGA_B_expected_prev[7] )
		&& ((VGA_B_expected_prev[7] !== last_VGA_B_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_B_expected_prev);
		$display ("     Real value = %b", VGA_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_VGA_B_exp[7] = VGA_B_expected_prev[7];
	end
	if (
		( VGA_G_expected_prev[0] !== 1'bx ) && ( VGA_G_prev[0] !== VGA_G_expected_prev[0] )
		&& ((VGA_G_expected_prev[0] !== last_VGA_G_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_VGA_G_exp[0] = VGA_G_expected_prev[0];
	end
	if (
		( VGA_G_expected_prev[1] !== 1'bx ) && ( VGA_G_prev[1] !== VGA_G_expected_prev[1] )
		&& ((VGA_G_expected_prev[1] !== last_VGA_G_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_VGA_G_exp[1] = VGA_G_expected_prev[1];
	end
	if (
		( VGA_G_expected_prev[2] !== 1'bx ) && ( VGA_G_prev[2] !== VGA_G_expected_prev[2] )
		&& ((VGA_G_expected_prev[2] !== last_VGA_G_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_VGA_G_exp[2] = VGA_G_expected_prev[2];
	end
	if (
		( VGA_G_expected_prev[3] !== 1'bx ) && ( VGA_G_prev[3] !== VGA_G_expected_prev[3] )
		&& ((VGA_G_expected_prev[3] !== last_VGA_G_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_VGA_G_exp[3] = VGA_G_expected_prev[3];
	end
	if (
		( VGA_G_expected_prev[4] !== 1'bx ) && ( VGA_G_prev[4] !== VGA_G_expected_prev[4] )
		&& ((VGA_G_expected_prev[4] !== last_VGA_G_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_VGA_G_exp[4] = VGA_G_expected_prev[4];
	end
	if (
		( VGA_G_expected_prev[5] !== 1'bx ) && ( VGA_G_prev[5] !== VGA_G_expected_prev[5] )
		&& ((VGA_G_expected_prev[5] !== last_VGA_G_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_VGA_G_exp[5] = VGA_G_expected_prev[5];
	end
	if (
		( VGA_G_expected_prev[6] !== 1'bx ) && ( VGA_G_prev[6] !== VGA_G_expected_prev[6] )
		&& ((VGA_G_expected_prev[6] !== last_VGA_G_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_VGA_G_exp[6] = VGA_G_expected_prev[6];
	end
	if (
		( VGA_G_expected_prev[7] !== 1'bx ) && ( VGA_G_prev[7] !== VGA_G_expected_prev[7] )
		&& ((VGA_G_expected_prev[7] !== last_VGA_G_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_G[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_G_expected_prev);
		$display ("     Real value = %b", VGA_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_VGA_G_exp[7] = VGA_G_expected_prev[7];
	end
	if (
		( VGA_R_expected_prev[0] !== 1'bx ) && ( VGA_R_prev[0] !== VGA_R_expected_prev[0] )
		&& ((VGA_R_expected_prev[0] !== last_VGA_R_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VGA_R_exp[0] = VGA_R_expected_prev[0];
	end
	if (
		( VGA_R_expected_prev[1] !== 1'bx ) && ( VGA_R_prev[1] !== VGA_R_expected_prev[1] )
		&& ((VGA_R_expected_prev[1] !== last_VGA_R_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VGA_R_exp[1] = VGA_R_expected_prev[1];
	end
	if (
		( VGA_R_expected_prev[2] !== 1'bx ) && ( VGA_R_prev[2] !== VGA_R_expected_prev[2] )
		&& ((VGA_R_expected_prev[2] !== last_VGA_R_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VGA_R_exp[2] = VGA_R_expected_prev[2];
	end
	if (
		( VGA_R_expected_prev[3] !== 1'bx ) && ( VGA_R_prev[3] !== VGA_R_expected_prev[3] )
		&& ((VGA_R_expected_prev[3] !== last_VGA_R_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VGA_R_exp[3] = VGA_R_expected_prev[3];
	end
	if (
		( VGA_R_expected_prev[4] !== 1'bx ) && ( VGA_R_prev[4] !== VGA_R_expected_prev[4] )
		&& ((VGA_R_expected_prev[4] !== last_VGA_R_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VGA_R_exp[4] = VGA_R_expected_prev[4];
	end
	if (
		( VGA_R_expected_prev[5] !== 1'bx ) && ( VGA_R_prev[5] !== VGA_R_expected_prev[5] )
		&& ((VGA_R_expected_prev[5] !== last_VGA_R_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VGA_R_exp[5] = VGA_R_expected_prev[5];
	end
	if (
		( VGA_R_expected_prev[6] !== 1'bx ) && ( VGA_R_prev[6] !== VGA_R_expected_prev[6] )
		&& ((VGA_R_expected_prev[6] !== last_VGA_R_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VGA_R_exp[6] = VGA_R_expected_prev[6];
	end
	if (
		( VGA_R_expected_prev[7] !== 1'bx ) && ( VGA_R_prev[7] !== VGA_R_expected_prev[7] )
		&& ((VGA_R_expected_prev[7] !== last_VGA_R_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_R[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_R_expected_prev);
		$display ("     Real value = %b", VGA_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VGA_R_exp[7] = VGA_R_expected_prev[7];
	end
	if (
		( clk_out_expected_prev !== 1'bx ) && ( clk_out_prev !== clk_out_expected_prev )
		&& ((clk_out_expected_prev !== last_clk_out_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_out_expected_prev);
		$display ("     Real value = %b", clk_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_clk_out_exp = clk_out_expected_prev;
	end
	if (
		( vga_blank_expected_prev !== 1'bx ) && ( vga_blank_prev !== vga_blank_expected_prev )
		&& ((vga_blank_expected_prev !== last_vga_blank_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_blank :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_blank_expected_prev);
		$display ("     Real value = %b", vga_blank_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vga_blank_exp = vga_blank_expected_prev;
	end
	if (
		( vga_h_sync_expected_prev !== 1'bx ) && ( vga_h_sync_prev !== vga_h_sync_expected_prev )
		&& ((vga_h_sync_expected_prev !== last_vga_h_sync_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_h_sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_h_sync_expected_prev);
		$display ("     Real value = %b", vga_h_sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vga_h_sync_exp = vga_h_sync_expected_prev;
	end
	if (
		( vga_sync_expected_prev !== 1'bx ) && ( vga_sync_prev !== vga_sync_expected_prev )
		&& ((vga_sync_expected_prev !== last_vga_sync_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_sync_expected_prev);
		$display ("     Real value = %b", vga_sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_vga_sync_exp = vga_sync_expected_prev;
	end
	if (
		( vga_v_sync_expected_prev !== 1'bx ) && ( vga_v_sync_prev !== vga_v_sync_expected_prev )
		&& ((vga_v_sync_expected_prev !== last_vga_v_sync_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vga_v_sync :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vga_v_sync_expected_prev);
		$display ("     Real value = %b", vga_v_sync_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_vga_v_sync_exp = vga_v_sync_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [7:0] VGA_B;
wire [7:0] VGA_G;
wire [7:0] VGA_R;
wire clk_out;
wire vga_blank;
wire vga_h_sync;
wire vga_sync;
wire vga_v_sync;

wire sampler;                             

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_R(VGA_R),
	.clk(clk),
	.clk_out(clk_out),
	.vga_blank(vga_blank),
	.vga_h_sync(vga_h_sync),
	.vga_sync(vga_sync),
	.vga_v_sync(vga_v_sync)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

top_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

top_vlg_check_tst tb_out(
	.VGA_B(VGA_B),
	.VGA_G(VGA_G),
	.VGA_R(VGA_R),
	.clk_out(clk_out),
	.vga_blank(vga_blank),
	.vga_h_sync(vga_h_sync),
	.vga_sync(vga_sync),
	.vga_v_sync(vga_v_sync),
	.sampler_rx(sampler)
);
endmodule

