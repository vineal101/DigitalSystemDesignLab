// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/07/2024 15:58:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab04_vs
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab04_vs_vlg_sample_tst(
	clk,
	R,
	SW,
	sampler_tx
);
input  clk;
input  R;
input  SW;
output sampler_tx;

reg sample;
time current_time;
always @(clk or R or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab04_vs_vlg_check_tst (
	HS,
	NS,
	sampler_rx
);
input  HS;
input  NS;
input sampler_rx;

reg  HS_expected;
reg  NS_expected;

reg  HS_prev;
reg  NS_prev;

reg  HS_expected_prev;
reg  NS_expected_prev;

reg  last_HS_exp;
reg  last_NS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	HS_prev = HS;
	NS_prev = NS;
end

// update expected /o prevs

always @(trigger)
begin
	HS_expected_prev = HS_expected;
	NS_expected_prev = NS_expected;
end



// expected NS
initial
begin
	NS_expected = 1'bX;
end 

// expected HS
initial
begin
	HS_expected = 1'bX;
end 
// generate trigger
always @(HS_expected or HS or NS_expected or NS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HS = %b | expected NS = %b | ",HS_expected_prev,NS_expected_prev);
	$display("| real HS = %b | real NS = %b | ",HS_prev,NS_prev);
`endif
	if (
		( HS_expected_prev !== 1'bx ) && ( HS_prev !== HS_expected_prev )
		&& ((HS_expected_prev !== last_HS_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HS_expected_prev);
		$display ("     Real value = %b", HS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HS_exp = HS_expected_prev;
	end
	if (
		( NS_expected_prev !== 1'bx ) && ( NS_prev !== NS_expected_prev )
		&& ((NS_expected_prev !== last_NS_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NS_expected_prev);
		$display ("     Real value = %b", NS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_NS_exp = NS_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab04_vs_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg R;
reg SW;
// wires                                               
wire HS;
wire NS;

wire sampler;                             

// assign statements (if any)                          
lab04_vs i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.HS(HS),
	.NS(NS),
	.R(R),
	.SW(SW)
);

// clk
initial
begin
	repeat(8)
	begin
		clk = 1'b0;
		clk = #60000 1'b1;
		# 60000;
	end
	clk = 1'b0;
end 

// R
initial
begin
	R = 1'b0;
	R = #20000 1'b1;
	R = #60000 1'b0;
	R = #420000 1'b1;
	R = #80000 1'b0;
	R = #280000 1'b1;
end 

// SW
initial
begin
	repeat(4)
	begin
		SW = 1'b0;
		SW = #100000 1'b1;
		# 100000;
	end
	SW = 1'b0;
end 

lab04_vs_vlg_sample_tst tb_sample (
	.clk(clk),
	.R(R),
	.SW(SW),
	.sampler_tx(sampler)
);

lab04_vs_vlg_check_tst tb_out(
	.HS(HS),
	.NS(NS),
	.sampler_rx(sampler)
);
endmodule

